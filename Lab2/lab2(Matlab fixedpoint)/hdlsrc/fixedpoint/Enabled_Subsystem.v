// -------------------------------------------------------------
// 
// File Name: hdlsrc\fixedpoint\Enabled_Subsystem.v
// Created: 2023-01-13 05:30:34
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_VALID                       ce_out        1
// o_MAGNITUDE                   ce_out        1
// o_PHASE                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Enabled_Subsystem
// Source Path: fixedpoint/Enabled Subsystem
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Enabled_Subsystem
          (clk,
           reset,
           clk_enable,
           i_VALID,
           i_COMPLEX_VALUE_re,
           i_COMPLEX_VALUE_im,
           ce_out,
           o_VALID,
           o_MAGNITUDE,
           o_PHASE);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [63:0] i_VALID;  // double
  input   signed [31:0] i_COMPLEX_VALUE_re;  // sfix32_En9
  input   signed [31:0] i_COMPLEX_VALUE_im;  // sfix32_En9
  output  ce_out;
  output  [63:0] o_VALID;  // double
  output  signed [32:0] o_MAGNITUDE;  // sfix33_En9
  output  signed [15:0] o_PHASE;  // sfix16_En13


  wire enb;
  reg [63:0] delayMatch_reg [0:33];  // ufix64 [34]
  wire [63:0] delayMatch_reg_next [0:33];  // ufix64 [34]
  wire [63:0] i_VALID_1;  // ufix64
  wire signed [63:0] Product_out1;  // sfix64_En18
  wire signed [63:0] Product1_out1;  // sfix64_En18
  wire signed [63:0] Add_out1;  // sfix64_En18
  wire signed [32:0] Sqrt_out1;  // sfix33_En9
  wire signed [31:0] Trigonometric_Function_out1;  // sfix32_En29
  wire signed [15:0] Data_Type_Conversion_out1;  // sfix16_En13
  reg signed [15:0] delayMatch1_reg [0:19];  // sfix16 [20]
  wire signed [15:0] delayMatch1_reg_next [0:19];  // sfix16_En13 [20]
  wire signed [15:0] Data_Type_Conversion_out1_1;  // sfix16_En13


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 64'h0000000000000000;
        delayMatch_reg[1] <= 64'h0000000000000000;
        delayMatch_reg[2] <= 64'h0000000000000000;
        delayMatch_reg[3] <= 64'h0000000000000000;
        delayMatch_reg[4] <= 64'h0000000000000000;
        delayMatch_reg[5] <= 64'h0000000000000000;
        delayMatch_reg[6] <= 64'h0000000000000000;
        delayMatch_reg[7] <= 64'h0000000000000000;
        delayMatch_reg[8] <= 64'h0000000000000000;
        delayMatch_reg[9] <= 64'h0000000000000000;
        delayMatch_reg[10] <= 64'h0000000000000000;
        delayMatch_reg[11] <= 64'h0000000000000000;
        delayMatch_reg[12] <= 64'h0000000000000000;
        delayMatch_reg[13] <= 64'h0000000000000000;
        delayMatch_reg[14] <= 64'h0000000000000000;
        delayMatch_reg[15] <= 64'h0000000000000000;
        delayMatch_reg[16] <= 64'h0000000000000000;
        delayMatch_reg[17] <= 64'h0000000000000000;
        delayMatch_reg[18] <= 64'h0000000000000000;
        delayMatch_reg[19] <= 64'h0000000000000000;
        delayMatch_reg[20] <= 64'h0000000000000000;
        delayMatch_reg[21] <= 64'h0000000000000000;
        delayMatch_reg[22] <= 64'h0000000000000000;
        delayMatch_reg[23] <= 64'h0000000000000000;
        delayMatch_reg[24] <= 64'h0000000000000000;
        delayMatch_reg[25] <= 64'h0000000000000000;
        delayMatch_reg[26] <= 64'h0000000000000000;
        delayMatch_reg[27] <= 64'h0000000000000000;
        delayMatch_reg[28] <= 64'h0000000000000000;
        delayMatch_reg[29] <= 64'h0000000000000000;
        delayMatch_reg[30] <= 64'h0000000000000000;
        delayMatch_reg[31] <= 64'h0000000000000000;
        delayMatch_reg[32] <= 64'h0000000000000000;
        delayMatch_reg[33] <= 64'h0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
          delayMatch_reg[8] <= delayMatch_reg_next[8];
          delayMatch_reg[9] <= delayMatch_reg_next[9];
          delayMatch_reg[10] <= delayMatch_reg_next[10];
          delayMatch_reg[11] <= delayMatch_reg_next[11];
          delayMatch_reg[12] <= delayMatch_reg_next[12];
          delayMatch_reg[13] <= delayMatch_reg_next[13];
          delayMatch_reg[14] <= delayMatch_reg_next[14];
          delayMatch_reg[15] <= delayMatch_reg_next[15];
          delayMatch_reg[16] <= delayMatch_reg_next[16];
          delayMatch_reg[17] <= delayMatch_reg_next[17];
          delayMatch_reg[18] <= delayMatch_reg_next[18];
          delayMatch_reg[19] <= delayMatch_reg_next[19];
          delayMatch_reg[20] <= delayMatch_reg_next[20];
          delayMatch_reg[21] <= delayMatch_reg_next[21];
          delayMatch_reg[22] <= delayMatch_reg_next[22];
          delayMatch_reg[23] <= delayMatch_reg_next[23];
          delayMatch_reg[24] <= delayMatch_reg_next[24];
          delayMatch_reg[25] <= delayMatch_reg_next[25];
          delayMatch_reg[26] <= delayMatch_reg_next[26];
          delayMatch_reg[27] <= delayMatch_reg_next[27];
          delayMatch_reg[28] <= delayMatch_reg_next[28];
          delayMatch_reg[29] <= delayMatch_reg_next[29];
          delayMatch_reg[30] <= delayMatch_reg_next[30];
          delayMatch_reg[31] <= delayMatch_reg_next[31];
          delayMatch_reg[32] <= delayMatch_reg_next[32];
          delayMatch_reg[33] <= delayMatch_reg_next[33];
        end
      end
    end

  assign i_VALID_1 = delayMatch_reg[33];
  assign delayMatch_reg_next[0] = i_VALID;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];
  assign delayMatch_reg_next[8] = delayMatch_reg[7];
  assign delayMatch_reg_next[9] = delayMatch_reg[8];
  assign delayMatch_reg_next[10] = delayMatch_reg[9];
  assign delayMatch_reg_next[11] = delayMatch_reg[10];
  assign delayMatch_reg_next[12] = delayMatch_reg[11];
  assign delayMatch_reg_next[13] = delayMatch_reg[12];
  assign delayMatch_reg_next[14] = delayMatch_reg[13];
  assign delayMatch_reg_next[15] = delayMatch_reg[14];
  assign delayMatch_reg_next[16] = delayMatch_reg[15];
  assign delayMatch_reg_next[17] = delayMatch_reg[16];
  assign delayMatch_reg_next[18] = delayMatch_reg[17];
  assign delayMatch_reg_next[19] = delayMatch_reg[18];
  assign delayMatch_reg_next[20] = delayMatch_reg[19];
  assign delayMatch_reg_next[21] = delayMatch_reg[20];
  assign delayMatch_reg_next[22] = delayMatch_reg[21];
  assign delayMatch_reg_next[23] = delayMatch_reg[22];
  assign delayMatch_reg_next[24] = delayMatch_reg[23];
  assign delayMatch_reg_next[25] = delayMatch_reg[24];
  assign delayMatch_reg_next[26] = delayMatch_reg[25];
  assign delayMatch_reg_next[27] = delayMatch_reg[26];
  assign delayMatch_reg_next[28] = delayMatch_reg[27];
  assign delayMatch_reg_next[29] = delayMatch_reg[28];
  assign delayMatch_reg_next[30] = delayMatch_reg[29];
  assign delayMatch_reg_next[31] = delayMatch_reg[30];
  assign delayMatch_reg_next[32] = delayMatch_reg[31];
  assign delayMatch_reg_next[33] = delayMatch_reg[32];



  assign Product_out1 = i_COMPLEX_VALUE_re * i_COMPLEX_VALUE_re;



  assign Product1_out1 = i_COMPLEX_VALUE_im * i_COMPLEX_VALUE_im;



  assign Add_out1 = Product_out1 + Product1_out1;



  Sqrt u_Sqrt (.clk(clk),
               .reset(reset),
               .enb(clk_enable),
               .din(Add_out1),  // sfix64_En18
               .dout(Sqrt_out1)  // sfix33_En9
               );

  assign o_MAGNITUDE = Sqrt_out1;

  atan2_cordic_nw u_Trigonometric_Function_inst (.clk(clk),
                                                 .reset(reset),
                                                 .enb(clk_enable),
                                                 .y_in(i_COMPLEX_VALUE_im),  // sfix32_En9
                                                 .x_in(i_COMPLEX_VALUE_re),  // sfix32_En9
                                                 .angle(Trigonometric_Function_out1)  // sfix32_En29
                                                 );

  assign Data_Type_Conversion_out1 = Trigonometric_Function_out1[31:16];



  always @(posedge clk or posedge reset)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 16'sb0000000000000000;
        delayMatch1_reg[1] <= 16'sb0000000000000000;
        delayMatch1_reg[2] <= 16'sb0000000000000000;
        delayMatch1_reg[3] <= 16'sb0000000000000000;
        delayMatch1_reg[4] <= 16'sb0000000000000000;
        delayMatch1_reg[5] <= 16'sb0000000000000000;
        delayMatch1_reg[6] <= 16'sb0000000000000000;
        delayMatch1_reg[7] <= 16'sb0000000000000000;
        delayMatch1_reg[8] <= 16'sb0000000000000000;
        delayMatch1_reg[9] <= 16'sb0000000000000000;
        delayMatch1_reg[10] <= 16'sb0000000000000000;
        delayMatch1_reg[11] <= 16'sb0000000000000000;
        delayMatch1_reg[12] <= 16'sb0000000000000000;
        delayMatch1_reg[13] <= 16'sb0000000000000000;
        delayMatch1_reg[14] <= 16'sb0000000000000000;
        delayMatch1_reg[15] <= 16'sb0000000000000000;
        delayMatch1_reg[16] <= 16'sb0000000000000000;
        delayMatch1_reg[17] <= 16'sb0000000000000000;
        delayMatch1_reg[18] <= 16'sb0000000000000000;
        delayMatch1_reg[19] <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
          delayMatch1_reg[2] <= delayMatch1_reg_next[2];
          delayMatch1_reg[3] <= delayMatch1_reg_next[3];
          delayMatch1_reg[4] <= delayMatch1_reg_next[4];
          delayMatch1_reg[5] <= delayMatch1_reg_next[5];
          delayMatch1_reg[6] <= delayMatch1_reg_next[6];
          delayMatch1_reg[7] <= delayMatch1_reg_next[7];
          delayMatch1_reg[8] <= delayMatch1_reg_next[8];
          delayMatch1_reg[9] <= delayMatch1_reg_next[9];
          delayMatch1_reg[10] <= delayMatch1_reg_next[10];
          delayMatch1_reg[11] <= delayMatch1_reg_next[11];
          delayMatch1_reg[12] <= delayMatch1_reg_next[12];
          delayMatch1_reg[13] <= delayMatch1_reg_next[13];
          delayMatch1_reg[14] <= delayMatch1_reg_next[14];
          delayMatch1_reg[15] <= delayMatch1_reg_next[15];
          delayMatch1_reg[16] <= delayMatch1_reg_next[16];
          delayMatch1_reg[17] <= delayMatch1_reg_next[17];
          delayMatch1_reg[18] <= delayMatch1_reg_next[18];
          delayMatch1_reg[19] <= delayMatch1_reg_next[19];
        end
      end
    end

  assign Data_Type_Conversion_out1_1 = delayMatch1_reg[19];
  assign delayMatch1_reg_next[0] = Data_Type_Conversion_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];
  assign delayMatch1_reg_next[4] = delayMatch1_reg[3];
  assign delayMatch1_reg_next[5] = delayMatch1_reg[4];
  assign delayMatch1_reg_next[6] = delayMatch1_reg[5];
  assign delayMatch1_reg_next[7] = delayMatch1_reg[6];
  assign delayMatch1_reg_next[8] = delayMatch1_reg[7];
  assign delayMatch1_reg_next[9] = delayMatch1_reg[8];
  assign delayMatch1_reg_next[10] = delayMatch1_reg[9];
  assign delayMatch1_reg_next[11] = delayMatch1_reg[10];
  assign delayMatch1_reg_next[12] = delayMatch1_reg[11];
  assign delayMatch1_reg_next[13] = delayMatch1_reg[12];
  assign delayMatch1_reg_next[14] = delayMatch1_reg[13];
  assign delayMatch1_reg_next[15] = delayMatch1_reg[14];
  assign delayMatch1_reg_next[16] = delayMatch1_reg[15];
  assign delayMatch1_reg_next[17] = delayMatch1_reg[16];
  assign delayMatch1_reg_next[18] = delayMatch1_reg[17];
  assign delayMatch1_reg_next[19] = delayMatch1_reg[18];



  assign o_PHASE = Data_Type_Conversion_out1_1;

  assign ce_out = clk_enable;

  assign o_VALID = i_VALID_1;

endmodule  // Enabled_Subsystem

